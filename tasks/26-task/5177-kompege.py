# data/26-images/5177-kompege.png
# Идея состоит в том, чтобы отсортировать картины по наименьшему конечному числу,
# т.е. у нас будут картины, которые кончаются как можно ближе к началу.
# Первым элементом списка подходящих картин делаем конец первой картины, а затем
# сравниваем последний элемент этого списка (в котором будут находится конечные числа
# картин) c начальным числом каждой картины.

# Получается следующее:
# Есть отсортированный список картин: [(2, 3), (1, 4), (4, 5)]
# Первым элементом подходящих картин будет второе число первого элемента этого списка - 3.
# Затем сравниваем это число с первым значением второй картины (т.е. с 1).
# 3 больше 1, значит это нам не подходит. Третья картина начинается после 3: она подходит.
file = open('data/26-files/5177-kompege.txt', encoding='utf-8')
file_2 = open('data/26-files/5177-2-kompege.txt', encoding='utf-8')
file.readline()
file_2.readline()


def get_valid_count(file):
    paints = [tuple(map(int, line.strip().split())) for line in file.readlines()]
    sorted_paints = sorted(paints, key=lambda x: x[1])   # Сортируем элементы по второму числу

    wall = [sorted_paints[0][1]]   # Первым элементом подходящих картин будет конец первой картины
    for paint in sorted_paints[1:]:
        start, end = paint
        if start > wall[-1]:   # Сравниваем начало какой-то картины с концом последней подходящей
            wall.append(end)
    return len(wall)


print(get_valid_count(file))
print(get_valid_count(file_2))

file.close()
file_2.close()
